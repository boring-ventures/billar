# BORING Simple-MVP Project: Core Implementation Guide

This guide focuses on implementing the core application logic for four key areas: API routes, authentication, data fetching hooks, and state management.

## 1. API Routes Implementation

### Setup Structure
1. Create API route organization in `/src/app/api/` following domain-driven design:
   - `/src/app/api/auth/` - Authentication operations
   - `/src/app/api/users/` - User profile operations
   - `/src/app/api/[domain]/` - Domain-specific operations

### Authentication Middleware
1. Create `/src/lib/auth.ts` with authentication utilities:
   ```typescript
   // Check user session
   export async function getCurrentUser() {
     // Use Supabase or NextAuth to get current session
     // Return user or null
   }
   
   // Auth middleware for API routes
   export async function authenticateRequest(req) {
     // Validate session token from headers
     // Return user or throw unauthorized error
   }
   ```

### API Route Implementation Pattern
1. Create route handlers using Next.js App Router format:
   ```typescript
   // /src/app/api/users/route.ts
   import { NextResponse } from 'next/server';
   import { authenticateRequest } from '@/lib/auth';
   import { db } from '@/lib/db'; // Prisma client instance
   import { userSchema } from '@/lib/validations/user';
   
   export async function GET(req) {
     try {
       // Authenticate request
       const user = await authenticateRequest(req);
       
       // Get profile from database using Prisma
       const profile = await db.user.findUnique({
         where: { id: user.id }
       });
       
       // Return response
       return NextResponse.json({ data: profile });
     } catch (error) {
       return NextResponse.json(
         { error: error.message },
         { status: error.status || 500 }
       );
     }
   }
   
   export async function PUT(req) {
     try {
       // Authenticate request
       const user = await authenticateRequest(req);
       
       // Parse and validate request body
       const body = await req.json();
       const validatedData = userSchema.parse(body);
       
       // Update profile in database using Prisma
       const updatedProfile = await db.user.update({
         where: { id: user.id },
         data: validatedData
       });
       
       // Return response
       return NextResponse.json({ data: updatedProfile });
     } catch (error) {
       return NextResponse.json(
         { error: error.message },
         { status: error.status || 500 }
       );
     }
   }
   ```

## 2. Authentication System

### Auth Provider Setup
1. Create authentication provider in `/src/providers/auth-provider.tsx`:
   ```typescript
   'use client';
   
   import { createContext, useContext, useEffect, useState } from 'react';
   import { Session, User } from '@supabase/supabase-js'; // Or NextAuth types
   
   type AuthContextType = {
     user: User | null;
     session: Session | null;
     isLoading: boolean;
     signIn: (email: string, password: string) => Promise<void>;
     signUp: (email: string, password: string) => Promise<void>;
     signOut: () => Promise<void>;
   };
   
   const AuthContext = createContext<AuthContextType>({} as AuthContextType);
   
   export function AuthProvider({ children }) {
     const [user, setUser] = useState<User | null>(null);
     const [session, setSession] = useState<Session | null>(null);
     const [isLoading, setIsLoading] = useState(true);
     
     // Initialize auth on load
     useEffect(() => {
       // Setup Supabase or NextAuth listeners
       // Update user and session state
       setIsLoading(false);
       
       // Return cleanup function
       return () => {
         // Remove listeners
       };
     }, []);
     
     // Auth methods
     async function signIn(email: string, password: string) {
       // Implementation with Supabase or NextAuth
     }
     
     async function signUp(email: string, password: string) {
       // Implementation with Supabase or NextAuth
     }
     
     async function signOut() {
       // Implementation with Supabase or NextAuth
     }
     
     return (
       <AuthContext.Provider value={{
         user,
         session,
         isLoading,
         signIn,
         signUp,
         signOut
       }}>
         {children}
       </AuthContext.Provider>
     );
   }
   
   export const useAuth = () => useContext(AuthContext);
   ```

### Protected Route Implementation
1. Create middleware or layout components for protected routes:
   ```typescript
   // /src/app/(dashboard)/layout.tsx
   import { redirect } from 'next/navigation';
   import { getCurrentUser } from '@/lib/auth';
   
   export default async function DashboardLayout({
     children,
   }: {
     children: React.ReactNode;
   }) {
     const user = await getCurrentUser();
     
     if (!user) {
       redirect('/login');
     }
     
     return <div className="dashboard-layout">{children}</div>;
   }
   ```

## 3. Custom Hooks Development

### Base API Hook
1. Create a reusable API fetch hook with React Query:
   ```typescript
   // /src/hooks/use-api.ts
   import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
   
   // Generic fetch function
   async function apiFetch(url: string, options?: RequestInit) {
     const response = await fetch(url, options);
     
     if (!response.ok) {
       const error = await response.json();
       throw new Error(error.message || 'An error occurred');
     }
     
     return response.json();
   }
   
   // GET hook
   export function useApiQuery(key: string[], url: string) {
     return useQuery({
       queryKey: key,
       queryFn: () => apiFetch(url),
     });
   }
   
   // POST/PUT/DELETE hook
   export function useApiMutation(url: string, method: string = 'POST') {
     const queryClient = useQueryClient();
     
     return useMutation({
       mutationFn: (data: any) => apiFetch(url, {
         method,
         headers: { 'Content-Type': 'application/json' },
         body: JSON.stringify(data),
       }),
       onSuccess: () => {
         // Invalidate related queries (customize as needed)
         queryClient.invalidateQueries({ queryKey: [url.split('/')[1]] });
       },
     });
   }
   ```

### Authentication Hooks
1. Create user profile hooks:
   ```typescript
   // /src/hooks/use-user.ts
   import { useApiQuery, useApiMutation } from './use-api';
   import { useAuth } from '@/providers/auth-provider';
   
   export function useCurrentUser() {
     const { user } = useAuth();
     
     return useApiQuery(['users', user?.id], `/api/users/${user?.id}`, {
       enabled: !!user, // Only fetch if user is logged in
     });
   }
   
   export function useUpdateProfile() {
     const { user } = useAuth();
     
     return useApiMutation(`/api/users/${user?.id}`, 'PUT');
   }
   ```

### Domain-Specific Hooks
1. Pattern for creating domain-specific data hooks:
   ```typescript
   // /src/hooks/use-[domain].ts
   import { useApiQuery, useApiMutation } from './use-api';
   
   export function useList[Domain]() {
     return useApiQuery(['[domain]'], '/api/[domain]');
   }
   
   export function use[Domain](id: string) {
     return useApiQuery(['[domain]', id], `/api/[domain]/${id}`);
   }
   
   export function useCreate[Domain]() {
     return useApiMutation('/api/[domain]');
   }
   
   export function useUpdate[Domain](id: string) {
     return useApiMutation(`/api/[domain]/${id}`, 'PUT');
   }
   
   export function useDelete[Domain](id: string) {
     return useApiMutation(`/api/[domain]/${id}`, 'DELETE');
   }
   ```

## 4. State Management

### React Query Provider Setup
1. Create a React Query provider in `/src/providers/query-provider.tsx`:
   ```typescript
   'use client';
   
   import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
   import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
   import { useState } from 'react';
   
   export function QueryProvider({ children }: { children: React.ReactNode }) {
     const [queryClient] = useState(() => new QueryClient({
       defaultOptions: {
         queries: {
           staleTime: 60 * 1000, // 1 minute
           refetchOnWindowFocus: false,
           retry: 1,
         },
       },
     }));
     
     return (
       <QueryClientProvider client={queryClient}>
         {children}
         <ReactQueryDevtools initialIsOpen={false} />
       </QueryClientProvider>
     );
   }
   ```

### UI State Provider
1. Create a UI state provider for global UI state:
   ```typescript
   // /src/providers/ui-provider.tsx
   'use client';
   
   import { createContext, useContext, useState } from 'react';
   
   type UIContextType = {
     theme: 'light' | 'dark';
     toggleTheme: () => void;
     isNavOpen: boolean;
     toggleNav: () => void;
     // Add other UI state as needed
   };
   
   const UIContext = createContext<UIContextType>({} as UIContextType);
   
   export function UIProvider({ children }: { children: React.ReactNode }) {
     const [theme, setTheme] = useState<'light' | 'dark'>('light');
     const [isNavOpen, setIsNavOpen] = useState(false);
     
     function toggleTheme() {
       setTheme(prev => prev === 'light' ? 'dark' : 'light');
     }
     
     function toggleNav() {
       setIsNavOpen(prev => !prev);
     }
     
     return (
       <UIContext.Provider value={{
         theme,
         toggleTheme,
         isNavOpen,
         toggleNav,
       }}>
         {children}
       </UIContext.Provider>
     );
   }
   
   export const useUI = () => useContext(UIContext);
   ```

### Root Provider Configuration
1. Combine all providers in a root provider:
   ```typescript
   // /src/providers/index.tsx
   'use client';
   
   import { AuthProvider } from './auth-provider';
   import { QueryProvider } from './query-provider';
   import { UIProvider } from './ui-provider';
   
   export function Providers({ children }: { children: React.ReactNode }) {
     return (
       <QueryProvider>
         <AuthProvider>
           <UIProvider>
             {children}
           </UIProvider>
         </AuthProvider>
       </QueryProvider>
     );
   }
   ```

2. Apply providers to the app in `/src/app/layout.tsx`:
   ```typescript
   import { Providers } from '@/providers';
   
   export default function RootLayout({
     children,
   }: {
     children: React.ReactNode;
   }) {
     return (
       <html lang="en">
         <body>
           <Providers>{children}</Providers>
         </body>
       </html>
     );
   }
   ```

## Integration Example: User Profile Flow

This example demonstrates how all pieces work together:

1. **API Route**: `/src/app/api/users/[id]/route.ts` handles user data requests
2. **Auth System**: Verifies user is authenticated before accessing profile
3. **Custom Hook**: `useCurrentUser()` fetches profile data from API
4. **State Management**: React Query manages caching and invalidation

### Component Implementation
```typescript
'use client';

import { useCurrentUser, useUpdateProfile } from '@/hooks/use-user';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useState } from 'react';

export function ProfileForm() {
  const { data: user, isLoading } = useCurrentUser();
  const updateProfile = useUpdateProfile();
  const [name, setName] = useState('');
  
  // Initialize form with user data when loaded
  useEffect(() => {
    if (user) {
      setName(user.name);
    }
  }, [user]);
  
  async function handleSubmit(e) {
    e.preventDefault();
    
    updateProfile.mutate({ name });
  }
  
  if (isLoading) return <div>Loading...</div>;
  
  return (
    <form onSubmit={handleSubmit}>
      <Input 
        value={name} 
        onChange={(e) => setName(e.target.value)} 
      />
      <Button type="submit" disabled={updateProfile.isPending}>
        {updateProfile.isPending ? 'Saving...' : 'Save Profile'}
      </Button>
    </form>
  );
}
```

This implementation guide provides a clear blueprint for building the core functionality of your application using a modern React stack with Next.js. 

## 5. Role-Based API Access Patterns

### Superadmin Authentication Implementation
1. Enhance authentication middleware to handle superadmin privileges in `/src/lib/auth.ts`:
   ```typescript
   // Auth middleware for API routes
   export async function authenticateRequest(req: Request) {
     const session = await auth();
     
     if (!session || !session.user) {
       throw {
         status: 401,
         message: "Unauthorized",
       };
     }
     
     // Get user profile from database
     const profile = await prisma.profile.findUnique({
       where: { userId: session.user.id },
       include: { company: true },
     });
     
     if (!profile) {
       throw {
         status: 404,
         message: "Profile not found",
       };
     }
     
     // For testing purposes or role enhancement
     // Ensure profile has the correct role information
     return {
       ...profile,
       role: profile.role || "SELLER" // Default or enhanced role
     };
   }
   ```

### API Access Control Patterns for Superadmins
1. Implement cross-company data access for superadmins:

   ```typescript
   // Example GET endpoint with superadmin access pattern
   export async function GET(req: NextRequest) {
     try {
       // Authenticate request using the middleware
       const profile = await authenticateRequest(req);
       
       // Initialize query filter based on role
       let queryFilter: any = {};
       
       // Role-based access control pattern
       if (profile.role === "SUPERADMIN") {
         // Superadmins can access all records across companies
         queryFilter = {}; // No company filter
       } else if (profile.companyId) {
         // Regular users can only access their company's data
         queryFilter = { companyId: profile.companyId };
       } else {
         // Edge case: User without company association
         return NextResponse.json({ data: [] });
       }
       
       // Add any additional filters from request parameters
       // (implementation will vary by endpoint)
       
       // Execute database query using Prisma
       const results = await prisma.someEntity.findMany({
         where: queryFilter,
         orderBy: { createdAt: 'desc' },
       });
       
       return NextResponse.json({ data: results });
     } catch (error: any) {
       return NextResponse.json(
         { error: error.message || "Internal server error" },
         { status: error.status || 500 }
       );
     }
   }
   ```

2. Handle cross-company operations for superadmins:

   ```typescript
   // Example POST endpoint with superadmin privileges
   export async function POST(req: NextRequest) {
     try {
       // Authenticate request using the middleware
       const profile = await authenticateRequest(req);
       
       // Parse and validate request body
       const body = await req.json();
       const validatedData = dataSchema.parse(body);
       
       // Determine company context for the operation
       let operationCompanyId: string;
       
       // Company resolution pattern
       if (profile.companyId) {
         // Use the user's assigned company
         operationCompanyId = profile.companyId;
       } 
       // Superadmin special handling
       else if (profile.role === "SUPERADMIN") {
         // Option 1: Use company ID from request if provided
         if (validatedData.companyId) {
           // Verify the company exists
           const companyExists = await prisma.company.findUnique({
             where: { id: validatedData.companyId },
           });
           
           if (!companyExists) {
             return NextResponse.json({ error: "Company not found" }, { status: 400 });
           }
           
           operationCompanyId = validatedData.companyId;
         } 
         // Option 2: Find a suitable default company
         else {
           // Get the first available company or create one if needed
           const defaultCompany = await prisma.company.findFirst({
             orderBy: { name: 'asc' }
           }) || await prisma.company.create({
             data: { name: "Default Company" }
           });
           
           operationCompanyId = defaultCompany.id;
         }
       }
       // Handle edge case
       else {
         return NextResponse.json(
           { error: "No company context available for this operation" },
           { status: 400 }
         );
       }
       
       // Perform the database operation with proper company context
       const result = await prisma.someEntity.create({
         data: {
           ...validatedData,
           companyId: operationCompanyId,
         },
       });
       
       return NextResponse.json({ data: result }, { status: 201 });
     } catch (error: any) {
       // Error handling pattern
       if (error instanceof z.ZodError) {
         return NextResponse.json({ error: error.errors }, { status: 400 });
       }
       
       return NextResponse.json(
         { error: error.message || "Internal server error" },
         { status: error.status || 500 }
       );
     }
   }
   ```

These patterns provide a consistent approach to handling superadmin privileges across the application:

1. **Role-Based Data Access**: Superadmins can access data across all companies
2. **Cross-Company Operations**: Superadmins can perform operations in any company context
3. **Default Company Resolution**: When needed, the system can automatically select or create a company context for superadmins
4. **Consistent Error Handling**: All operations use the same pattern for error responses

This approach ensures a clean separation of concerns while maintaining proper authorization throughout the application. These patterns can be applied to any domain-specific API endpoint that requires role-based access control. 

## 6. Superadmin Implementation Focus

### Important Implementation Considerations

1. **Superadmin-Only Development Approach**
   - During the initial development phase, ALL functionality and API routes must focus EXCLUSIVELY on the superadmin role.
   - Do not implement or include logic for other user roles (like SELLER) at this stage.
   - Any conditional role checks in API routes should be removed in favor of direct superadmin implementation patterns.

2. **Role Enforcement Pattern**
   - Override all role assignments in both server and client authentication flows to ensure users are treated as superadmins:
   
   ```typescript
   // In auth middleware (server-side)
   export async function authenticateRequest(req: Request) {
     // ... existing authentication logic ...
     
     // Force SUPERADMIN role for all authenticated users
     return {
       ...profile,
       role: "SUPERADMIN" // Always set to SUPERADMIN regardless of actual role
     };
   }
   
   // In auth provider (client-side)
   // Ensure profile role is set to SUPERADMIN after fetching
   const enhancedProfile = {
     ...profileData,
     role: "SUPERADMIN"
   };
   ```

3. **API Access Patterns**
   - Remove all conditional role-based query filters in API routes
   - Implement the full superadmin access pattern for all data queries:
   
   ```typescript
   // Example in API route
   // No company filtering for superadmin data access
   let queryFilter: any = {};
   console.log("Using SUPERADMIN access pattern - no company filter applied");
   ```

4. **Company Context Resolution**
   - For operations requiring a company context, follow this simplified pattern:
   
   ```typescript
   // Handle superadmin company context resolution
   if (validatedData.companyId) {
     // Use provided company ID after validation
     const companyExists = await prisma.company.findUnique({
       where: { id: validatedData.companyId },
     });
     
     if (!companyExists) {
       return NextResponse.json({ error: "Company not found" }, { status: 400 });
     }
     
     operationCompanyId = validatedData.companyId;
   } else {
     // Auto-resolve to first available company or create default
     const defaultCompany = await prisma.company.findFirst({
       orderBy: { name: 'asc' }
     }) || await prisma.company.create({
       data: { name: "Default Company" }
     });
     
     operationCompanyId = defaultCompany.id;
   }
   ```

5. **Debug Logging**
   - Include detailed logging in auth flows and API routes to help diagnose role-related issues:
   
   ```typescript
   console.log("Profile from auth middleware:", {
     id: profile.id,
     role: profile.role,
     companyId: profile.companyId,
     isSuperAdmin: profile.role === "SUPERADMIN"
   });
   ```

By focusing exclusively on superadmin implementation for the initial development phase, we can ensure consistent data access across the application and simplify the implementation process. This approach creates a solid foundation before potentially expanding to support additional user roles in later phases. 

## 7. Implementation Errors and Refinements

### Common Issues Encountered

1. **"Access Denied" Errors Despite SUPERADMIN Enforcement**
   - **Root Cause**: Inconsistency in auth provider implementation
   - **Solution**: Ensure role enforcement is consistent across all parts of the auth system
   
   ```typescript
   // In auth provider (client-side)
   // Make sure role is consistently set to SUPERADMIN in ALL relevant places:
   // 1. Initial state setup
   // 2. After fetching profile data
   // 3. After any auth state changes

   // Example fix:
   const [userData, setUserData] = useState<UserData>({
     // Always initialize with SUPERADMIN role
     role: "SUPERADMIN",
     // other fields...
   });

   // When setting user data from API:
   setUserData({
     ...response.data,
     role: "SUPERADMIN" // Force override role regardless of API response
   });
   ```

2. **Role-Based Component Rendering Issues**
   - **Root Cause**: Permission checks in individual page components
   - **Solution**: Remove permission checks in table pages (new, edit, details) during SUPERADMIN-only phase
   
   ```typescript
   // REMOVE these types of checks in all components during SUPERADMIN phase:
   {userRole === "SUPERADMIN" && <AdminOnlyComponent />}
   
   // Just render the components directly:
   <AdminOnlyComponent />
   ```

3. **Runtime Error: "TypeError: undefined is not iterable"**
   - **Root Cause**: Attempted to map over undefined arrays from API responses
   - **Solution**: Implement defensive programming patterns
   
   ```typescript
   // Problem:
   companies.map(company => ...)
   
   // Solution:
   const safeCompanies = Array.isArray(companies) ? companies : [];
   safeCompanies.map(company => ...)
   ```

4. **API Response Handling**
   - **Root Cause**: API routes returning error objects instead of expected data structure
   - **Solution**: Ensure all API routes return valid default values even in error cases
   
   ```typescript
   // Example for companies API:
   try {
     // API logic here
   } catch (error) {
     console.error("Error:", error);
     // Return empty array instead of error object
     return NextResponse.json([]);
   }
   ```

5. **Form Component Null/Undefined Values**
   - **Root Cause**: Form components not handling undefined/null values properly
   - **Solution**: Add null checks and default values in form components
   
   ```typescript
   // Problem:
   <Input value={field.value} />
   
   // Solution:
   <Input value={field.value === undefined || field.value === null ? "" : field.value} />
   
   // For objects that might be undefined:
   const userRole = currentUser?.role || profile?.role || "SUPERADMIN"; // Ensure a default role
   const userCompanyId = currentUser?.companyId || profile?.companyId;
   ```

### Recommended Implementation Updates

1. **Always Use Default Empty Arrays**
   - Initialize all array states with empty arrays, not undefined
   - Check if API response data is an array before using array methods
   - Use fallback empty arrays for all data-fetching hooks

2. **Implement Null Coalescence Everywhere**
   - Use optional chaining (`?.`) for all object properties that might be undefined
   - Provide default values for all variables that could be undefined
   - Use the nullish coalescing operator (`??`) to provide defaults

3. **Enhanced API Response Pattern**
   - Standardize all API responses to include empty default data in error cases
   - For list endpoints, always return `[]` instead of error objects
   - For single-item endpoints, consider returning `null` or a default empty object

4. **Form Component Safety**
   - Initialize form values with safe defaults
   - Add explicit type checking before form submission
   - Validate that required IDs (like companyId) exist before operations

5. **Auth Provider Improvements**
   - Enforce role consistency across all aspects of authentication
   - Add debug logging for auth state changes
   - Remove role-specific logic and components during SUPERADMIN-only phase

These refinements will help create a more robust implementation of the patterns described in this document and prevent common runtime errors during development. 